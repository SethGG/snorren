from flask import render_template
from flask_socketio import send, emit
from flask_login import current_user
from cerberus import Validator
from basephase import BasePhase
import globals as g
import app


class Burger:
    team = "Burgers"
    night_step = None
    day_step = None
    death_step = None


class Herbergier(Burger):
    class night_step(BasePhase):

        name = 'NachtHerbergier'
        priority = 2

        def __init__(self, parent):
            super().__init__(parent)
            self.used = False

        def send_page(self, player=current_user):
            emit('update_page',
                 render_template('game/night_herbergier.html', num=self.parent.num, player=player),
                 room=player.sid)

        def handle_message(self, msg):
            schema = {
                'request': {
                    'type': 'string',
                    'allowed': ['reveal']
                },
                'name': {
                    'type': 'string',
                    'allowed': [x for x, y in g.PLAYERS.items() if not y.dead]
                }
            }
            v = Validator(schema)
            if (v.validate(msg) and current_user.role.__class__.__name__ == 'Herbergier'
                    and not self.used):
                role = g.PLAYERS[msg['name']].role.__class__.__name__
                current_user.info[msg['name']]['role'] = role
                send({'name': msg['name'], 'role': role})
                self.used = True
                app.socketio.sleep(5)
                self.parent.start_next_phase()


class Hoer(Burger):
    class night_step(BasePhase):

        name = 'NachtHoer'
        priority = 3

        def __init__(self, parent):
            super().__init__(parent)

        def send_page(self, player=current_user):
            emit('update_page',
                 render_template('game/night_hoer.html', num=self.parent.num, player=player),
                 room=player.sid)

        def handle_message(self, msg):
            schema = {
                'request': {
                    'type': 'string',
                    'allowed': ['protect']
                },
                'name': {
                    'type': 'string',
                    'allowed': [x for x, y in g.PLAYERS.items() if not y.dead]
                }
            }
            v = Validator(schema)
            if (v.validate(msg) and current_user.role.__class__.__name__ == 'Hoer'):
                self.parent.protected['hoer'] = [msg['name']]
                self.parent.start_next_phase()


class Oma(Burger):
    def __init__(self):
        Burger.__init__(self)


class Pimp(Burger):
    def __init__(self):
        self._move_hoer = True
        self.dont_smile = True

    @property
    def move_hoer(self):
        if 'Hoer' in [x.role.__class__.__name__ for x in g.PLAYERS.values()]:
            return self._move_hoer
        else:
            return False

    @move_hoer.setter
    def move_hoer(self, bool):
        self._move_hoer = bool

    class night_step(BasePhase):

        name = 'NachtPimp'
        priority = 4

        def __init__(self, parent):
            super().__init__(parent)

        def send_page(self, player=current_user):
            emit('update_page',
                 render_template('game/night_pimp.html', num=self.parent.num, player=player),
                 room=player.sid)

        def handle_message(self, msg):
            schema = {
                'request': {
                    'type': 'string',
                    'allowed': ['move hoer', 'dont smile', 'continue']
                },
                'name': {
                    'type': 'string',
                    'required': False,
                    'dependencies': {'request': ['move hoer']},
                    'allowed': [x for x, y in g.PLAYERS.items() if not y.dead]
                }
            }
            v = Validator(schema)
            if v.validate(msg) and current_user.role.__class__.__name__ == 'Pimp':
                if msg['request'] == 'move hoer' and current_user.role.move_hoer:
                    if 'hoer' in self.parent.protected:
                        self.parent.protected['hoer'] = [msg['name']]
                    current_user.role.move_hoer = False
                elif msg['request'] == 'dont smile' and current_user.role.dont_smile:
                    self.parent.protected['pimp'] = [current_user.name]
                    current_user.role.dont_smile = False
                elif msg['request'] == 'continue':
                    self.parent.start_next_phase()


class Priester(Burger):
    class night_step(BasePhase):

        name = 'NachtPriester'
        priority = 1

        def __init__(self, parent):
            if not parent.num == 1:
                parent.start_next_phase()
            super().__init__(parent)

        def send_page(self, player=current_user):
            emit('update_page',
                 render_template('game/night_priester.html', num=self.parent.num, player=player),
                 room=player.sid)

        def handle_message(self, msg):
            schema = {
                'request': {
                    'type': 'string',
                    'allowed': ['match']
                },
                'names': {
                    'type': 'list',
                    'schema': {
                        'type': 'string',
                        'allowed': [x for x, y in g.PLAYERS.items() if not y.dead]
                    },
                    'minlength': 2,
                    'maxlength': 2
                }
            }
            v = Validator(schema)
            if (v.validate(msg) and current_user.role.__class__.__name__ == 'Priester'):
                for name in msg['names']:
                    g.PLAYERS[name].lover = True
                self.parent.start_next_phase()


class Scooterjeugd(Burger):
    def __init__(self):
        self.disturb = True

    class night_step(BasePhase):

        name = 'NachtScooterjeugd'
        priority = 5

        def __init__(self, parent):
            super().__init__(parent)

        def send_page(self, player=current_user):
            emit('update_page',
                 render_template('game/night_scooter.html', num=self.parent.num, player=player),
                 room=player.sid)

        def handle_message(self, msg):
            schema = {
                'request': {
                    'type': 'string',
                    'allowed': ['disturb night', 'continue']
                }
            }
            v = Validator(schema)
            if (v.validate(msg) and current_user.role.__class__.__name__ == 'Scooterjeugd'):
                if msg['request'] == 'disturb night' and current_user.role.disturb:
                    self.parent.protected['Scooterjeugd'] = list(g.PLAYERS.keys())
                    current_user.role.disturb = False
                if msg['request'] == 'continue':
                    self.parent.start_next_phase()


class Nazi:
    team = "Nazi's"
    day_step = None
    death_step = None

    class night_step(BasePhase):

        name = 'NachtNazis'
        priority = 6

        def __init__(self, parent):
            super().__init__(parent)
            self.votes = {x: None for x, y in g.PLAYERS.items()
                          if not y.dead and "Nazi's" in y.teams}
            self.confirms = 0

        def send_page(self, player=current_user):
            emit('update_page',
                 render_template('game/night_nazis.html', num=self.parent.num, player=player),
                 room=player.sid)

        def handle_message(self, msg):
            schema = {
                'request': {
                    'type': 'string',
                    'allowed': ['vote', 'confirm', 'continue']
                },
                'name': {
                    'type': 'string',
                    'required': False,
                    'dependencies': {'request': ['vote']},
                    'allowed': [x for x, y in g.PLAYERS.items() if not y.dead]
                }
            }
            v = Validator(schema)
            if v.validate(msg) and "Nazi's" in current_user.teams:
                if msg['request'] == 'vote':
                    self.votes[current_user.name] = msg['name']
                    self.confirms = 0
                    for name in self.votes:
                        if name != current_user.name:
                            send({current_user.name: msg['name']}, room=g.PLAYERS[name].sid)
                if msg['request'] == 'confirm':
                    self.confirms += 1
                    if self.confirms == len(self.votes):
                        self.parent.start_next_phase()


class Snor(Nazi):
    def __init__(self):
        Nazi.__init__(self)
